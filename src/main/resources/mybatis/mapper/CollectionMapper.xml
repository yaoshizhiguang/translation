<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.springboot.translation.mapper.CollectionMapper">
  <resultMap id="BaseResultMap" type="com.demo.springboot.translation.common.domain.Collection">
    <id column="cId" jdbcType="INTEGER" property="cid" />
    <result column="cUid" jdbcType="INTEGER" property="cuid" />
    <result column="time" jdbcType="DATE" property="time" />
    <result column="language" jdbcType="INTEGER" property="language" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.demo.springboot.translation.common.domain.CollectionWithBLOBs">
    <result column="origin_text" jdbcType="LONGVARCHAR" property="originText" />
    <result column="result_text" jdbcType="LONGVARCHAR" property="resultText" />
    <result column="cName" jdbcType="LONGVARCHAR" property="cname" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    cId, cUid, time, language
  </sql>
  <sql id="Blob_Column_List">
    origin_text, result_text, cName
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.demo.springboot.translation.common.domain.CollectionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from collection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.demo.springboot.translation.common.domain.CollectionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from collection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from collection
    where cId = #{cid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from collection
    where cId = #{cid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.demo.springboot.translation.common.domain.CollectionExample">
    delete from collection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.demo.springboot.translation.common.domain.CollectionWithBLOBs">
    insert into collection (cId, cUid, time, 
      language, origin_text, result_text, 
      cName)
    values (#{cid,jdbcType=INTEGER}, #{cuid,jdbcType=INTEGER}, #{time,jdbcType=DATE}, 
      #{language,jdbcType=INTEGER}, #{originText,jdbcType=LONGVARCHAR}, #{resultText,jdbcType=LONGVARCHAR}, 
      #{cname,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.demo.springboot.translation.common.domain.CollectionWithBLOBs">
    insert into collection
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cid != null">
        cId,
      </if>
      <if test="cuid != null">
        cUid,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="language != null">
        language,
      </if>
      <if test="originText != null">
        origin_text,
      </if>
      <if test="resultText != null">
        result_text,
      </if>
      <if test="cname != null">
        cName,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cid != null">
        #{cid,jdbcType=INTEGER},
      </if>
      <if test="cuid != null">
        #{cuid,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=DATE},
      </if>
      <if test="language != null">
        #{language,jdbcType=INTEGER},
      </if>
      <if test="originText != null">
        #{originText,jdbcType=LONGVARCHAR},
      </if>
      <if test="resultText != null">
        #{resultText,jdbcType=LONGVARCHAR},
      </if>
      <if test="cname != null">
        #{cname,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.demo.springboot.translation.common.domain.CollectionExample" resultType="java.lang.Long">
    select count(*) from collection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update collection
    <set>
      <if test="record.cid != null">
        cId = #{record.cid,jdbcType=INTEGER},
      </if>
      <if test="record.cuid != null">
        cUid = #{record.cuid,jdbcType=INTEGER},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=DATE},
      </if>
      <if test="record.language != null">
        language = #{record.language,jdbcType=INTEGER},
      </if>
      <if test="record.originText != null">
        origin_text = #{record.originText,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.resultText != null">
        result_text = #{record.resultText,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cname != null">
        cName = #{record.cname,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update collection
    set cId = #{record.cid,jdbcType=INTEGER},
      cUid = #{record.cuid,jdbcType=INTEGER},
      time = #{record.time,jdbcType=DATE},
      language = #{record.language,jdbcType=INTEGER},
      origin_text = #{record.originText,jdbcType=LONGVARCHAR},
      result_text = #{record.resultText,jdbcType=LONGVARCHAR},
      cName = #{record.cname,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update collection
    set cId = #{record.cid,jdbcType=INTEGER},
      cUid = #{record.cuid,jdbcType=INTEGER},
      time = #{record.time,jdbcType=DATE},
      language = #{record.language,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.springboot.translation.common.domain.CollectionWithBLOBs">
    update collection
    <set>
      <if test="cuid != null">
        cUid = #{cuid,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=DATE},
      </if>
      <if test="language != null">
        language = #{language,jdbcType=INTEGER},
      </if>
      <if test="originText != null">
        origin_text = #{originText,jdbcType=LONGVARCHAR},
      </if>
      <if test="resultText != null">
        result_text = #{resultText,jdbcType=LONGVARCHAR},
      </if>
      <if test="cname != null">
        cName = #{cname,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where cId = #{cid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.demo.springboot.translation.common.domain.CollectionWithBLOBs">
    update collection
    set cUid = #{cuid,jdbcType=INTEGER},
      time = #{time,jdbcType=DATE},
      language = #{language,jdbcType=INTEGER},
      origin_text = #{originText,jdbcType=LONGVARCHAR},
      result_text = #{resultText,jdbcType=LONGVARCHAR},
      cName = #{cname,jdbcType=LONGVARCHAR}
    where cId = #{cid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.springboot.translation.common.domain.Collection">
    update collection
    set cUid = #{cuid,jdbcType=INTEGER},
      time = #{time,jdbcType=DATE},
      language = #{language,jdbcType=INTEGER}
    where cId = #{cid,jdbcType=INTEGER}
  </update>
</mapper>